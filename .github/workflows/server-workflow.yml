name: Server workflow

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  QT5: 5.15.2
  QT6: 6.1.1
  VULKAN_VER: 1.2.189
  VULKAN_VER_FULL: 1.2.189.0

jobs:
  generator:
    runs-on: ubuntu-latest
    outputs:
      job-matrix: ${{ steps.set-matrix.outputs.job-matrix }}
    steps:
      - id: set-matrix
        run: echo "::set-output name=job-matrix::{\"os\":[\"ubuntu\",\"windows\",\"macos\"],\"qt\":[\"${{ env.QT5 }}\",\"${{ env.QT6 }}\"]}"

  test:
    needs: [generator]
    runs-on: ${{ format('{0}-latest', matrix.os) }}
    strategy:
      matrix: ${{fromJSON(needs.generator.outputs.job-matrix)}}
    steps:
      - name: Cache Qt
        id: cache-qt
        uses: actions/cache@v1
        with:
          path: ../Qt
          key: ${{ matrix.os }}-QtCache-${{ matrix.qt }}
      
      - name: Install Qt
        uses: jurplel/install-qt-action@v2
        with:
          aqtversion: ==2.0.0
          # modules: ${{ matrix.qt == env.QT6 && 'qtwebsockets' || '' }} # to be enabled with QT6.2
          version: '${{ matrix.qt }}'
          cached: ${{ steps.cache-qt.outputs.cache-hit }}

      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'
          submodules: 'recursive'

      - name: Set outputs
        run: |
          echo "::set-output name=dependencies::$(python3 ${{ github.workspace }}/scripts/vcpkgPackages.py qt${{ matrix.qt }} ${{ matrix.os }}-latest)"
          echo "::set-output name=cacheKey::$(python3 ${{ github.workspace }}/scripts/vcpkgCacheKey.py qt${{ matrix.qt }} ${{ matrix.os }}-latest)."
          echo "::set-output name=triplet::x64-$(python3 ${{ github.workspace }}/scripts/triplet.py ${{ matrix.os }})"
          echo "::set-output name=cc::$(python3 ${{ github.workspace }}/scripts/cc.py ${{ matrix.os }})"
          echo "::set-output name=cxx::$(python3 ${{ github.workspace }}/scripts/cxx.py ${{ matrix.os }})"
        id: set-outputs
        env:
          PYTHONPATH: ./QtPiDeckCommon/scripts/

      - name: Check outputs
        run: |
          echo "dependencies=${{ steps.set-outputs.outputs.dependencies }}"
          echo "cacheKey=${{ steps.set-outputs.outputs.cacheKey }}"
          echo "triplet=${{ steps.set-outputs.outputs.triplet }}"
          echo "cc=${{ steps.set-outputs.outputs.cc }}"
          echo "cxx=${{ steps.set-outputs.outputs.cxx }}"

      - uses: lukka/run-vcpkg@v7.3
        with:
          vcpkgDirectory: ${{ github.workspace }}/QtPiDeckCommon/ext/vcpkg
          appendedCacheKey: ${{ steps.set-outputs.outputs.cacheKey }}
          vcpkgTriplet: ${{ steps.set-outputs.outputs.triplet }}
          vcpkgArguments: ${{ steps.set-outputs.outputs.dependencies }}
          doNotUpdateVcpkg: true
        if: steps.vcpkgPackages.outputs.dependencies != 'nil'

      - name: Update llvm-clang
        run: |
          brew update
          brew upgrade llvm
        if: matrix.os == 'macos'

      - name: Install additional Qt6 dependencies
        run: |
          wget -qO - https://packages.lunarg.com/lunarg-signing-key-pub.asc | sudo apt-key add -
          sudo wget -qO /etc/apt/sources.list.d/lunarg-vulkan-${VULKAN_VER}-focal.list https://packages.lunarg.com/vulkan/${VULKAN_VER}/lunarg-vulkan-${VULKAN_VER}-focal.list
          sudo apt update
          sudo apt install
          sudo apt install vulkan-sdk libxkbcommon-dev -y
        if: matrix.os == 'ubuntu' && matrix.qt == env.QT6

      - name: Cache Vulkan
        id: cache-vulkan
        uses: actions/cache@v1
        with:
          path: C:\VulkanSDK\${{ env.VULKAN_VER_FULL }}
          key: vulkan-${{ env.VULKAN_VER_FULL }}
        if: matrix.os == 'windows' && matrix.qt == env.QT6

      - name: Setup Vulkan(windows)
        run: |
           Invoke-WebRequest -Uri "https://sdk.lunarg.com/sdk/download/${env:VULKAN_VER_FULL}/windows/VulkanSDK-${env:VULKAN_VER_FULL}-Installer.exe" -OutFile VulkanSDK.exe
           $installer = Start-Process -FilePath VulkanSDK.exe -Wait -PassThru -ArgumentList @("/S");
           $installer.WaitForExit();
        if: matrix.os == 'windows' && matrix.qt == env.QT6 && !steps.cache-vulkan.outputs.cache-hit

      - name: Set vulkan sdk variable(windows)
        run: echo "VULKAN_SDK=C:\VulkanSDK\${env:VULKAN_VER_FULL}" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        if: matrix.os == 'windows' && matrix.qt == env.QT6

      - uses: ilammy/msvc-dev-cmd@v1
        if: matrix.os == 'windows'

      - uses: lukka/get-cmake@latest

      - name: Create build directory
        run: cmake -E make_directory "build"

      - run: cmake -S . -B build -G Ninja -DBUILD_COMMON_TESTS=OFF -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/QtPiDeckCommon/ext/vcpkg/scripts/buildsystems/vcpkg.cmake
        env:
          CC: ${{ steps.set-outputs.outputs.cc }}
          CXX: ${{ steps.set-outputs.outputs.cxx }}

      - run: cmake --build build

      - name: Set path to QtPiDeckCommon library
        run: Get-Location | % { echo "$_\QtPiDeckCommon\QtPiDeckCommon" } | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        working-directory: build
        if: matrix.os == 'windows'

      - name: Test project
        run: ctest --output-on-failure
        working-directory: build
        env:
          LD_LIBRARY_PATH: ./QtPiDeckCommon/QtPiDeckCommon

  code-checks-generator:
    runs-on: ubuntu-latest
    outputs:
      job-matrix: ${{ steps.set-matrix.outputs.job-matrix }}
    steps:
      - id: set-matrix
        run: echo "::set-output name=job-matrix::{\"qt\":[\"${{ env.QT5 }}\",\"${{ env.QT6 }}\"]}"

  clang-tidy:
    if: github.event_name == 'pull_request'
    needs: [code-checks-generator, test]
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{fromJSON(needs.code-checks-generator.outputs.job-matrix)}}
    steps:
      - name: Cache Qt
        id: cache-qt
        uses: actions/cache@v1
        with:
          path: ../Qt
          key: ubuntu-QtCache-${{ matrix.qt }}
      
      - name: Install Qt
        uses: jurplel/install-qt-action@v2
        with:
          aqtversion: ==2.0.0
          # modules: ${{ matrix.qt == env.QT6 && 'qtwebsockets' || '' }} # to be enabled with QT6.2
          version: '${{ matrix.qt }}'
          cached: ${{ steps.cache-qt.outputs.cache-hit }}

      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'
          submodules: 'recursive'

      - name: Set outputs
        run: |
          echo "::set-output name=dependencies::$(python3 ${{ github.workspace }}/scripts/vcpkgPackages.py qt${{ matrix.qt }} ubuntu-latest)"
          echo "::set-output name=cacheKey::$(python3 ${{ github.workspace }}/scripts/vcpkgCacheKey.py qt${{ matrix.qt }} ubuntu-latest)."
          echo "::set-output name=triplet::x64-$(python3 ${{ github.workspace }}/scripts/triplet.py ubuntu)"
        id: set-outputs
        env:
          PYTHONPATH: ./QtPiDeckCommon/scripts/

      - name: Check outputs
        run: |
          echo "dependencies=${{ steps.set-outputs.outputs.dependencies }}"
          echo "cacheKey=${{ steps.set-outputs.outputs.cacheKey }}"
          echo "triplet=${{ steps.set-outputs.outputs.triplet }}"
          echo "cc=${{ steps.set-outputs.outputs.cc }}"
          echo "cxx=${{ steps.set-outputs.outputs.cxx }}"

      - uses: lukka/run-vcpkg@v7.3
        with:
          vcpkgDirectory: ${{ github.workspace }}/QtPiDeckCommon/ext/vcpkg
          appendedCacheKey: ${{ steps.set-outputs.outputs.cacheKey }}
          vcpkgTriplet: ${{ steps.set-outputs.outputs.triplet }}
          vcpkgArguments: ${{ steps.set-outputs.outputs.dependencies }}
          doNotUpdateVcpkg: true
        if: steps.vcpkgPackages.outputs.dependencies != 'nil'

      - uses: lukka/get-cmake@latest

      - run: sudo apt-get install -y clang-tidy-12 clang-12

      - name: Create build directory
        run: cmake -E make_directory "build"

      - run: cmake -S . -B build -G Ninja -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/QtPiDeckCommon/ext/vcpkg/scripts/buildsystems/vcpkg.cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
        env:
          CC: clang-12
          CXX: clang++-12

      - run: mkdir clang-tidy-reports

      - name: Generate reports
        run: | 
          git diff --name-only $(git merge-base origin/master HEAD) HEAD | 
          grep '\.cpp$' |
          xargs -P2 -I% bash -c 'v=%; grep -q -e ".*\"file\":.*%" build/compile_commands.json && clang-tidy-12 -p build % > clang-tidy-reports/${v//\//.}.txt || true'

      - run: find clang-tidy-reports -name '*.txt' -empty -exec rm -v {} \; 

      - run: echo ::set-output name=count::$(find clang-tidy-reports -name '*.txt' | wc -l)
        id: reports-number

      - run: echo "reports:${{ steps.reports-number.outputs.count }}"

      - name: Export report
        uses: actions/upload-artifact@v2
        with:
          name: clang-tidy-reports
          path: clang-tidy-reports
        if: steps.reports-number.outputs.count != 0

      - name: Fail if clang-tidy found something
        if: steps.reports-number.outputs.count != 0
        uses: actions/github-script@v3
        with:
          script: |
            core.setFailed('clang-tidy detected errors. Check job artifacts')

  code-coverage:
    needs: [code-checks-generator, test]
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{fromJSON(needs.code-checks-generator.outputs.job-matrix)}}
    steps:
      - name: Cache Qt
        id: cache-qt
        uses: actions/cache@v1
        with:
          path: ../Qt
          key: ubuntu-QtCache-${{ matrix.qt }}
      
      - name: Install Qt
        uses: jurplel/install-qt-action@v2
        with:
          aqtversion: ==2.0.0
          # modules: ${{ matrix.qt == env.QT6 && 'qtwebsockets' || '' }} # to be enabled with QT6.2
          version: '${{ matrix.qt }}'
          cached: ${{ steps.cache-qt.outputs.cache-hit }}

      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'
          submodules: 'recursive'

      - name: Set outputs
        run: |
          echo "::set-output name=dependencies::$(python3 ${{ github.workspace }}/scripts/vcpkgPackages.py qt${{ matrix.qt }} ubuntu-latest)"
          echo "::set-output name=cacheKey::$(python3 ${{ github.workspace }}/scripts/vcpkgCacheKey.py qt${{ matrix.qt }} ubuntu-latest)."
          echo "::set-output name=triplet::x64-$(python3 ${{ github.workspace }}/scripts/triplet.py ubuntu)"
        id: set-outputs
        env:
          PYTHONPATH: ./QtPiDeckCommon/scripts/

      - name: Check outputs
        run: |
          echo "dependencies=${{ steps.set-outputs.outputs.dependencies }}"
          echo "cacheKey=${{ steps.set-outputs.outputs.cacheKey }}"
          echo "triplet=${{ steps.set-outputs.outputs.triplet }}"
          echo "cc=${{ steps.set-outputs.outputs.cc }}"
          echo "cxx=${{ steps.set-outputs.outputs.cxx }}"

      - uses: lukka/run-vcpkg@v7.3
        with:
          vcpkgDirectory: ${{ github.workspace }}/QtPiDeckCommon/ext/vcpkg
          appendedCacheKey: ${{ steps.set-outputs.outputs.cacheKey }}
          vcpkgTriplet: ${{ steps.set-outputs.outputs.triplet }}
          vcpkgArguments: ${{ steps.set-outputs.outputs.dependencies }}
          doNotUpdateVcpkg: true
        if: steps.vcpkgPackages.outputs.dependencies != 'nil'

      - uses: lukka/get-cmake@latest

      - name: Create build directory
        run: cmake -E make_directory "build"

      - name: Run cmake
        run:  cmake -S . -B build -G Ninja -DBUILD_COMMON_TESTS=OFF -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/QtPiDeckCommon/ext/vcpkg/scripts/buildsystems/vcpkg.cmake -DCODECOV=ON -DCMAKE_BUILD_TYPE=Debug
        env:
          CC: gcc-10
          CXX: g++-10

      - run: cmake --build build

      - name: Install lcov
        run: sudo apt update && sudo apt install -y lcov

      - name: Initial lcov run
        run: lcov --rc lcov_branch_coverage=1 --no-external --capture --initial --directory . --output-file before.txt

      - name: Test project
        run: ctest --output-on-failure
        working-directory: build
        env:
          LD_LIBRARY_PATH: ./QtPiDeckCommon/QtPiDeckCommon

      - name: Post-test lcov run
        run: lcov --rc lcov_branch_coverage=1 --capture --directory . --output-file coverage.txt

      - name: Merge lcov reports
        run: |
            lcov --rc lcov_branch_coverage=1 --add-tracefile before.txt --add-tracefile coverage.txt --output-file coverage.txt
            rm before.txt

      - name: Clean up report
        run: lcov --rc lcov_branch_coverage=1 --remove coverage.txt -o coverage.txt '/usr/*' '*/Tests/*' '*/build/*' '*boost*' '*QtPiDeckCommon*'

      - uses: codecov/codecov-action@v1
        with:
          functionalities: "fix" 