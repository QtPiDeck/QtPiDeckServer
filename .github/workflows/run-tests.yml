name: Run tests

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ${{ matrix.cfg.os }}
    env:
      VULKAN_VER: 1.2.162
      VULKAN_VER_FULL: 1.2.162.0
    # it might be better to create a job to generate this cfg list
    strategy:
      matrix:
        cfg:
        - { os: ubuntu-20.04, qt: 5.15.2, cc: gcc-10, cxx: g++-10, ccname: gcc-10, experimental: false, vcpkgtriplet: x64-linux }
        - { os: ubuntu-20.04, qt: 6.2.0, cc: gcc-10, cxx: g++-10, ccname: gcc-10, experimental: true, vcpkgtriplet: x64-linux }
        - { os: windows-latest, qt: 5.15.2, cc: cl, cxx: cl, ccname: cl, experimental: false, vcpkgtriplet: x64-windows }
        - { os: windows-latest, qt: 6.2.0, cc: cl, cxx: cl, ccname: cl, experimental: true, vcpkgtriplet: x64-windows }
        - { os: macos-latest, qt: 5.15.2, cc: /usr/local/opt/llvm/bin/clang, cxx: /usr/local/opt/llvm/bin/clang++, ccname: clang, experimental: false, vcpkgtriplet: x64-osx }
        - { os: macos-latest, qt: 6.2.0, cc: /usr/local/opt/llvm/bin/clang, cxx: /usr/local/opt/llvm/bin/clang++, ccname: clang, experimental: true, vcpkgtriplet: x64-osx }

    name: Qt${{ matrix.cfg.qt }} - ${{ matrix.cfg.ccname }}[${{ matrix.cfg.os }}]
    continue-on-error: ${{ matrix.cfg.experimental }}

    steps:
      - name: Cache Qt
        id: cache-qt
        uses: actions/cache@v1
        with:
          path: ../Qt
          key: ${{ runner.os }}-QtCache-${{ matrix.cfg.qt }}

      - uses: actions/checkout@v2

      - name: Checkout submodules
        run: |
          git config --global url."https://github.com/".insteadOf "git@github.com:"
          git submodule sync --recursive
          git submodule update --init --force --recursive --depth=1

      - uses: lukka/get-cmake@latest

      - name: Install Qt
        uses: jurplel/install-qt-action@v2
        with:
          version: '${{ matrix.cfg.qt }}'
          cached: ${{ steps.cache-qt.outputs.cache-hit }}

      - name: Make build dir
        run: mkdir build

      - uses: ilammy/msvc-dev-cmd@v1
        if: matrix.cfg.os == 'windows-latest'

      - name: Install additional Qt6 dependencies(ubuntu)
        run: |
          wget -qO - https://packages.lunarg.com/lunarg-signing-key-pub.asc | sudo apt-key add -
          sudo wget -qO /etc/apt/sources.list.d/lunarg-vulkan-${VULKAN_VER}-focal.list https://packages.lunarg.com/vulkan/${VULKAN_VER}/lunarg-vulkan-${VULKAN_VER}-focal.list
          sudo apt update
          sudo apt install
          sudo apt install vulkan-sdk libxkbcommon-dev -y
        if: matrix.cfg.os == 'ubuntu-20.04' && matrix.cfg.qt == '6.1.1'

      - name: Install gcc 8
        run: sudo apt-get install g++-8 -y
        if: matrix.cfg.cc == 'gcc-8'

      - name: Update clang
        run: |
          brew update
          brew upgrade llvm
        if: matrix.cfg.os == 'macos-latest'

      - name: Cache Vulkan(windows)
        id: cache-vulkan
        uses: actions/cache@v1
        with:
          path: C:\VulkanSDK\${{ env.VULKAN_VER_FULL }}
          key: vulkan-${{ env.VULKAN_VER_FULL }}
        if: matrix.cfg.os == 'windows-latest' && matrix.cfg.qt == '6.1.1'

      - name: Setup Vulkan(windows)
        run: |
           Invoke-WebRequest -Uri "https://sdk.lunarg.com/sdk/download/${env:VULKAN_VER_FULL}/windows/VulkanSDK-${env:VULKAN_VER_FULL}-Installer.exe" -OutFile VulkanSDK.exe
           $installer = Start-Process -FilePath VulkanSDK.exe -Wait -PassThru -ArgumentList @("/S");
           $installer.WaitForExit();
        if: matrix.cfg.os == 'windows-latest' && matrix.cfg.qt == '6.1.1' && !steps.cache-vulkan.outputs.cache-hit

      - name: Set vulkan sdk variable(windows)
        run: echo "VULKAN_SDK=C:\VulkanSDK\${env:VULKAN_VER_FULL}" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        if: matrix.cfg.os == 'windows-latest' && matrix.cfg.qt == '6.1.1'

      - name: Get vcpkg package list and cache key
        run: |
          echo "::set-output name=dependencies::$(python3 ${{ github.workspace }}/scripts/vcpkgPackages.py qt${{ matrix.cfg.qt }} ${{ matrix.cfg.os }})"
          echo "::set-output name=cacheKey::$(python3 ${{ github.workspace }}/scripts/vcpkgCacheKey.py qt${{ matrix.cfg.qt }} ${{ matrix.cfg.os }})"
        id: vcpkgPackages
        env:
          PYTHONPATH: ./QtPiDeckCommon/scripts/

      - uses: lukka/run-vcpkg@v7.3
        with:
          vcpkgDirectory: ${{ github.workspace }}/QtPiDeckCommon/ext/vcpkg
          appendedCacheKey: ${{ steps.vcpkgPackages.outputs.cacheKey }}
          vcpkgTriplet: ${{ matrix.cfg.vcpkgtriplet }}
          vcpkgArguments: ${{ steps.vcpkgPackages.outputs.dependencies }}
          doNotUpdateVcpkg: true
        if: steps.vcpkgPackages.outputs.dependencies != 'nil'

      - name: Run cmake
        run: cmake .. -G Ninja -DBUILD_COMMON_TESTS=OFF -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/QtPiDeckCommon/ext/vcpkg/scripts/buildsystems/vcpkg.cmake
        working-directory: build
        env:
          CC: ${{ matrix.cfg.cc }}
          CXX: ${{ matrix.cfg.cxx }}

      - name: Build project
        run: ninja
        working-directory: build

      - name: Set path to QtPiDeckCommon library(windows)
        run: Get-Location | % { echo "$_\QtPiDeckCommon\QtPiDeckCommon" } | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        working-directory: build
        if: matrix.cfg.os == 'windows-latest'

      - name: Test project
        run: ctest --output-on-failure
        working-directory: build
        env:
          LD_LIBRARY_PATH: ./QtPiDeckCommon/QtPiDeckCommon
